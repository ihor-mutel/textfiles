// entry point checkDictionary(text, true)
// YouTube iPlayerElementName = '#player-container'
// YouTube togglePlayButtonName =  '.ytp-play-button'
// OpenLoad iPlayerElementName = '#mediaspace_wrapper'
var dictionaryLink = "https://rawgit.com/web1991t/textfiles/master/DICTIONARY_chat_415092182.json"
var iPlayerElementName;
var togglePlayButtonName;
var togglePlayState;
var iCurrentSubs;
var dictionary;
var iSubtitlesElementName;
var jQueryiSubtitlesElementName;
var eventAttached;
var currentHref;
var autoGeneratedClass;
var pausedStateElementName;
var playerName;

// ============ CONFIGURATION ==================== //

if (hrefCheck("youtube.com")) {
    playerName = "youtube";
    iPlayerElementName = '#player-container';
    iSubtitlesElementName = 'caption-window'
    autoGeneratedClass = ".ytp-menuitem-content"
    togglePlayButtonName = '.ytp-play-button'
    jQueryiSubtitlesElementName = "." + iSubtitlesElementName
    init();

} else if (hrefCheck("oload.download") || hrefCheck("openload.co")) {
    playerName = "openload";
    iPlayerElementName = '#mediaspace_wrapper';
    iSubtitlesElementName = 'vjs-text-track-display'
    togglePlayButtonName = ".vjs-play-control"
    jQueryiSubtitlesElementName = "." + iSubtitlesElementName
    init();
}

// ============================================== //

// check location 
function hrefCheck(currentLocation) {
    if (window.location.href.includes(currentLocation)) {
        console.log("Applying script for: " + currentLocation)
        currentHref = currentLocation;
        return true;
    } else {
        return false;
    }
}


// add jQuery

function addjQuery() {
    var script = document.createElement('script');
    script.src = 'https://code.jquery.com/jquery-1.11.0.min.js';
    script.type = 'text/javascript';
    document.getElementsByTagName('head')[0].appendChild(script)
    console.log("jquery added");
}

// Add subtitle interceptor

function addSubtitleInterceptor() {
    $(document).on('DOMNodeInserted', function(e) {
        //console.log(e.target);

        if ($(e.target).hasClass(iSubtitlesElementName)) {
            addThreeChecker()
        }

        if (!$(iPlayerElementName).is(":visible") && $(".iBlock").length) {
            $(".iBlock")[0].style.display = "none";
			// while (iblock[0]) {
				// iblock[0].parentNode.removeChild(iblock[0]);
			// }
            console.log("Remove iBlock")
        }

        if ($(jQueryiSubtitlesElementName).length && !eventAttached) {
            console.log("Fix subthree event")
            addThreeChecker()
        }

    });
    console.log("Subtile interceptor added")
};

function addThreeChecker() {
    eventAttached = true;
    $(jQueryiSubtitlesElementName).hide();
    $(jQueryiSubtitlesElementName)[0].addEventListener('DOMSubtreeModified', function() {
        var tempSubs = $(jQueryiSubtitlesElementName).text();
        var iCurrentSubsBoolean = iCurrentSubs ? iCurrentSubs.trim() : false

        if (tempSubs.trim() != iCurrentSubsBoolean && tempSubs.trim() != "") {
            iCurrentSubs = tempSubs;
            //console.log(iCurrentSubs);
            checkDictionary(iCurrentSubs, true)
        }

    });
}

// get dictionary

function checkLocalDictionary() {
    if (localStorage.dictionary) {
        dictionary = getLocalStorageDictionary();
        console.log("USE LOCAL DICTIONARY");
    } else {
        getRemoteDictionary()
    }

}

function getRemoteDictionary() {
    try {
        $.getJSON(dictionaryLink, function(data) {

            dictionary = data;
            setStorageDictionary(dictionary);
            console.log("Dictionary was downloaded");
            console.log("USE REMOTE DICTIONARY")
            console.log(data.length);
        });
    } catch (err) {
        if (!window.jQuery) {
            addjQuery();
        }
        setTimeout(function() {
            getRemoteDictionary();
        }, 1000);
        console.log(err);
    }
}

// local storage operations

function setStorageDictionary(dictionary) {
    //console.log("save to local storage")
    localStorage.setItem('dictionary', JSON.stringify(dictionary));
}

function getLocalStorageDictionary() {
    //console.log("get from local storage")
    var retrievedObject = localStorage.getItem('dictionary');
    return JSON.parse(retrievedObject);
}



// show subtitles

function showSubtitles(word,translationsFound) {

    var iblock = document.getElementsByClassName('iblock');

    while (iblock[0]) {
        iblock[0].parentNode.removeChild(iblock[0]);
    }

    var iSub = document.createElement('div');
    //var iPlayer = document.getElementById('player-container')


    // if (playerName == "youtube" && checkAutoSubtitles("auto-generated")) {
        // iSub.style.textAlign = "left";
        // iSub.style.paddingLeft = ($(iPlayerElementName).css('width').replace("px", "") / 8) + "px";
    // } else {
        // iSub.style.textAlign = "center";
    // }
    iSub.id = 'iblock';
    iSub.className = 'iblock';
    iSub.innerText = word;
    iSub.style.position = "absolute";
    // iSub.style.zIndex = "2147483647";

    iSub.style.color = "white";
    iSub.style.display = "block";
    iSub.style.fontFamily = "Roboto, Arial, sans-serif";
    iSub.style.backgroundColor = "rgba(0, 0, 0, 0.6)";

	iSub.style.textAlign = "center";
    if ((window.fullScreen) || (window.innerWidth == screen.width && window.innerHeight == screen.height)) {
        //console.log(window.innerWidth)
        iSub.style.width = screen.width + "px";
        iSub.style.left = 0;
        // iSub.style.top = (screen.height / 1.38) + "px";
        iSub.style.bottom = (screen.height / 7) + "px";
        //console.log("You entered fullscreen");
        iSub.style.fontSize = "24px";
		iSub.style.zIndex = "2147483647";
        // iSub.style.fontSize = ($(iPlayerElementName).css('height').replace("px", "") / 25) + "px";
    } else {
		iSub.style.zIndex = 10
        iSub.style.left = 0;
        iSub.style.width = $(iPlayerElementName).css('width');
        iSub.style.bottom = ($(iPlayerElementName).css('height').replace("px", "") / 7) + "px";
        iSub.style.fontSize = ($(iPlayerElementName).css('height').replace("px", "") / 25) + "px";
        // iSub.style.fontSize = "1.5em";
    }

    $(iPlayerElementName)[0].appendChild(iSub);

    addClickListener();
    addMouseenterListener();
	if(translationsFound){
		delayPause(3)
	}
}

function delayPause(seconds){ 
$(togglePlayButtonName)[0].click()
	setTimeout(function() {
            $(togglePlayButtonName)[0].click();
        }, seconds * 1000);
}

// check if subtitles auto generated

function checkAutoSubtitles(searchText) {
    var ytpTags = $(autoGeneratedClass);

    for (var i = 0; i < ytpTags.length; i++) {
        if (ytpTags[i] && ytpTags[i].innerText.includes(searchText)) {
            return true;
        }
    }
    return false;
}


// configure toggle button

function addMouseenterListener() {

    if (togglePlayButtonName) {
        togglePlayState = true;
        $(iPlayerElementName)[0].onmousemove = function() {
            var cX = event.clientX;
            var cY = event.clientY;
            var subPosition = $('.iblock')[0].getBoundingClientRect();
            if (cY > subPosition.top && cY < subPosition.bottom && togglePlayState && !checkState()) {

                togglePlayState = false;
				// stop
                $(togglePlayButtonName)[0].click();
            }
            if ((cY < subPosition.top || cY > subPosition.bottom) && !togglePlayState && checkState()) {

                togglePlayState = true;
				// start
                $(togglePlayButtonName)[0].click();
            }
            if (cY < subPosition.top || cY > subPosition.bottom) {}
        };
    }
}

function checkState() {
    if (playerName == "youtube") {
        return $(togglePlayButtonName)[0].getAttribute('aria-label') === "Play"
    } else if (playerName == "openload") {
        return $(togglePlayButtonName)[0].title === "Play"
    }

}

// check selection

function addClickListener() {
    $("#iblock").click(function(event) {
        var text = getSelectionText().trim().replace(/ /g, '+');
        if (text != '' && checkWord(text)) {
            removeFromDictionary(text);
			togglePlayState = false;
            return
        }
        if (text != '') {
            $.ajax('https://json2jsonp.com/?url=https://api.lingualeo.com/gettranslates?word=' + encodeURIComponent(text), {
                contentType: 'application/json',
                dataType: 'jsonp',
                success: function(data) {
                    //console.log(data)
                    addIntoDictionary(data, text);
					togglePlayState = false;
                }
            })
            // $.getJSON("https://cors.io/?https://api.lingualeo.com/gettranslates?word=" + encodeURIComponent(text), function(data) {
            // addIntoDictionary(data, text);
            // });
        }
    });

}

// convert translation object into string

function cleanTranslations(data) {
    var translation = ""
	var sliceIndex;
		
    for (var i = 0; i < data.translate.length; i++) {

        translation += "," + data.translate[i].value.replaceAll(/[A-Za-z]/,"").trim();

    }
    var translations = translation.split(",")

    var uniqueTranslations = [];
    $.each(translations, function(i, el) {
        if ($.inArray(el.trim(), uniqueTranslations) === -1) uniqueTranslations.push(el.trim());
    });

    uniqueTranslations.clean("")

    uniqueTranslations.sort(function(a, b) {
        return b.length - a.length;
    });

    uniqueTranslations.sort(function(a, b) {
        return a.length - b.length;
    });

	for (var i = 0; i < uniqueTranslations.length;i++){
	var stringLength = uniqueTranslations.slice(0, i).toString().length
	
		if(stringLength > 60) {
			break;
		}
	
		sliceIndex = i
	}
	
    uniqueTranslations = uniqueTranslations.slice(0, sliceIndex);
    return uniqueTranslations
}

// add or delete word from dictionary

function removeFromDictionary(word) {
    var element = checkWord(word);
    // debugger;
    var index = dictionary.indexOf(element);
    dictionary.splice(index, 1);
    //console.log("Remove from dictionary index: " + index);
    checkDictionary(iCurrentSubs, false);
    setStorageDictionary(dictionary);
}

function addIntoDictionary(data, word) {

    var translation = {
        word: word,
        translation: cleanTranslations(data)
    }
    //console.log("add into dictionary")
    //console.log(translation);
    dictionary.push(translation);
    checkDictionary(iCurrentSubs, false);
    setStorageDictionary(dictionary);
}

// get selected text

function getSelectionText() {
    var text = "";
    if (window.getSelection) {
        text = window.getSelection().toString();
    } else if (document.selection && document.selection.type != "Control") {
        text = document.selection.createRange().text.replaceAll(/[^A-Za-z\s\'\-]/, "");
    }
    return text;
}

// check if word in dictionary

function checkDictionary(sentence, firstCall) {
    if (firstCall) {
        // debugger;
        //console.log("=======CHANGE iCURRENT SUBS=======")
        //console.log(sentence)
        iCurrentSubs = sentence
    }
	var translationsFound;
	
    var wordsArray = sentence.replaceAll("\n", " ").replaceAll(/\s\s+/g, " ").replaceAll(/[^A-Za-z\s\'\-]/, "").split(" ")
    for (var i = 0; i < wordsArray.length; i++) {
		var currentWord = wordsArray[i].trim()
        var entry = checkWord(currentWord);
        if (entry) {
			translationsFound = true;
            // debugger;
            var translation = entry.translation
            var translationMessage = "\n" + currentWord.toUpperCase() + ": " + translation;
            if (!sentence.includes(translationMessage)) {
                // console.log(sentence)
                // console.log("Replace with: " + translation)
                var upperCaseWord = sentence.replaceAll(currentWord, currentWord.toUpperCase());
                sentence = upperCaseWord + translationMessage;
            }
            // else if(sentence.match(/\n/g) && sentence.match(/\n/g).length > 3) {
            // sentence = sentence + " ..."
            // break;
            // }

        }
    }
    showSubtitles(sentence,translationsFound)
    //return sentence
};

function checkWord(word) {
    // debugger;
    for (var i = 0; i < dictionary.length; i++) {
        if (dictionary[i].word.trim().toLowerCase() == word.trim().toLowerCase()) {
            return (dictionary[i])
        }
    }
}


String.prototype.replaceAll = function(search, replacement) {
    var target = this;
    return target.replace(new RegExp(search, 'g'), replacement);
};

Array.prototype.clean = function(deleteValue) {
    for (var i = 0; i < this.length; i++) {
        if (this[i] == deleteValue) {
            this.splice(i, 1);
            i--;
        }
    }
    return this;
};

function onWindowSizeChange(){
	$( window ).resize(function() {
		checkDictionary(iCurrentSubs, false);
	});
}

function init() {
    if (!window.jQuery) {
        addjQuery();
    }

    try {
        if (!dictionary) {
            checkLocalDictionary();
        }
    } catch (err) {
        console.log(err);

        checkLocalDictionary();

    }

    try {
        addSubtitleInterceptor();
    } catch (err) {
        setTimeout(function() {
            addSubtitleInterceptor();
        }, 1000);
    }
	
	
	// on window size change
	
	try {
        onWindowSizeChange();
    } catch (err) {
        setTimeout(function() {
            onWindowSizeChange();
        }, 1000);
    }
	
}